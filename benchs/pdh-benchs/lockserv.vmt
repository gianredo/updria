; VMT translation of lockserv.pyv (IC3PO flavored)
(declare-sort node 0)

(define-fun .node ((S node)) node (! S :sort 1))

(declare-fun __lock_msg (node) Bool)
(declare-fun __grant_msg (node) Bool)
(declare-fun __unlock_msg (node) Bool)
(declare-fun __holds_lock (node) Bool)
(declare-fun __server_holds_lock () Bool)

(declare-fun lock_msg (node) Bool)
(declare-fun grant_msg (node) Bool)
(declare-fun unlock_msg (node) Bool)
(declare-fun holds_lock (node) Bool)
(declare-fun server_holds_lock () Bool)

(define-fun .lock_msg ((V0 node)) Bool (! (__lock_msg V0) :next lock_msg))
(define-fun .grant_msg ((V0 node)) Bool (! (__grant_msg V0) :next grant_msg))
(define-fun .unlock_msg ((V0 node)) Bool (! (__unlock_msg V0) :next unlock_msg))
(define-fun .holds_lock ((V0 node)) Bool (! (__holds_lock V0) :next holds_lock))
(define-fun .server_holds_lock () Bool (! __server_holds_lock :next server_holds_lock))



(define-fun .prop () Bool (!
 (let (($v (forall ((N1 node) (N2 node)) (=> (and (__holds_lock N1) (__holds_lock N2)) (= N1 N2)))
 ))
 (and $v))
 :invar-property 0))

(define-fun .init () Bool (!
 (let (($v (and (forall ((N node)) (not (__lock_msg N))) (forall ((N node)) (not (__grant_msg N))) (forall ((N node)) (not (__unlock_msg N))) (forall ((N node)) (not (__holds_lock N))) __server_holds_lock)
 ))
 (and $v))
 :init true))

(define-fun .axiom () Bool (!
 (let (($v true
 ))
 (and $v))
 :axiom true))

(define-fun .action_send_lock () Bool (!
    (let (($v (exists ((n node)) (and (forall ((N node)) (= (lock_msg N) (or (__lock_msg N) (= N n)))) (forall ((x0 node)) (= (grant_msg x0) (__grant_msg x0))) (forall ((x0 node)) (= (unlock_msg x0) (__unlock_msg x0))) (forall ((x0 node)) (= (holds_lock x0) (__holds_lock x0))) (= server_holds_lock __server_holds_lock)))
    ))
    (and $v))
    :action send_lock))

(define-fun .action_recv_lock () Bool (!
    (let (($v (exists ((n node)) (and (forall ((N node)) (and __server_holds_lock (__lock_msg n) (not server_holds_lock) (= (lock_msg N) (and (__lock_msg N) (not (= N n)))) (= (grant_msg N) (or (__grant_msg N) (= N n))))) (forall ((x0 node)) (= (unlock_msg x0) (__unlock_msg x0))) (forall ((x0 node)) (= (holds_lock x0) (__holds_lock x0)))))
    ))
    (and $v))
    :action recv_lock))

(define-fun .action_recv_grant () Bool (!
    (let (($v (exists ((n node)) (and (forall ((N node)) (and (__grant_msg n) (= (grant_msg N) (and (__grant_msg N) (not (= N n)))) (= (holds_lock N) (or (__holds_lock N) (= N n))))) (forall ((x0 node)) (= (lock_msg x0) (__lock_msg x0))) (forall ((x0 node)) (= (unlock_msg x0) (__unlock_msg x0))) (= server_holds_lock __server_holds_lock)))
    ))
    (and $v))
    :action recv_grant))

(define-fun .action_unlock () Bool (!
    (let (($v (exists ((n node)) (and (forall ((N node)) (and (__holds_lock n) (= (holds_lock N) (and (__holds_lock N) (not (= N n)))) (= (unlock_msg N) (or (__unlock_msg N) (= N n))))) (forall ((x0 node)) (= (lock_msg x0) (__lock_msg x0))) (forall ((x0 node)) (= (grant_msg x0) (__grant_msg x0))) (= server_holds_lock __server_holds_lock)))
    ))
    (and $v))
    :action unlock))

(define-fun .action_recv_unlock () Bool (!
    (let (($v (exists ((n node)) (and (forall ((N node)) (and (__unlock_msg n) (= (unlock_msg N) (and (__unlock_msg N) (not (= N n)))) server_holds_lock)) (forall ((x0 node)) (= (lock_msg x0) (__lock_msg x0))) (forall ((x0 node)) (= (grant_msg x0) (__grant_msg x0))) (forall ((x0 node)) (= (holds_lock x0) (__holds_lock x0)))))
    ))
    (and $v))
    :action recv_unlock))
