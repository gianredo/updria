(declare-sort node 0)

(declare-const epoch (Array node Int))
(declare-const msg (Array node Int))
(declare-const has_lock (Array node Bool))

(declare-const epoch.next (Array node Int))
(declare-const msg.next (Array node Int))
(declare-const has_lock.next (Array node Bool))

(define-fun sv.epoch () (Array node Int) (! epoch :next epoch.next))
(define-fun sv.msg () (Array node Int) (! msg :next msg.next))
(define-fun sv.has_lock () (Array node Bool) (! has_lock :next has_lock.next))

(declare-const first node)
(define-fun frozen.first () node (! first :rigid true))

(define-fun prop () Bool
  (!
   (forall ((X node) (Y node))
           (=> (not (= X Y))
               (not (and (select has_lock X) (select has_lock Y)))))
   :invar-property 0)
  )

(define-fun prop-false () Bool
  (!
   (forall ((X node))
               (=> (not (= X first)) (not (and (select has_lock X)))))
   :invar-property 1)
  )




(define-fun init () Bool
  (!
   (forall ((V0 node))
           (and
            (ite (= V0 first) (select has_lock V0) (not (select has_lock V0)))
            (= (select msg V0) (- 1))
            (= (select epoch V0) 0)))
   :init true)
  )

(declare-const t Int)

(define-fun release_lock () Bool
  (exists ((x node) (y node))
          (forall ((V0 node))
                  (and
                   (ite (= V0 x)
                        (not (select has_lock.next V0))
                        (= (select has_lock.next V0) (select has_lock V0)))
                   (ite (= V0 y)
                        (= (select msg.next V0) t)
                        (= (select msg.next V0) (select msg V0)))
                   (= (select epoch.next V0) (select epoch V0))
                   (select has_lock x)
                   (> t (select epoch x))
                   )
                  )
          )
  )

(define-fun take_lock () Bool
  (exists ((y node))
          (forall ((V0 node))
                  (and
                   (ite (= V0 y)
                        (select has_lock.next V0)
                        (= (select has_lock.next V0) (select has_lock V0)))
                   (= (select msg.next V0) (select msg V0))
                   (ite (= V0 y)
                        (= (select epoch.next V0) t)
                        (= (select epoch.next V0) (select epoch V0)))
                   (= t (select msg y))
                   (> t (select epoch y))
                   )
                  )
          )
  )

(define-fun trans () Bool
  (! (or
      take_lock
      release_lock
      )
     :trans true))

;;-----------------------------------------------------------------------------

;; (define-fun .time ((S time)) time (! S :sort 0))
;; (define-fun .node ((S node)) node (! S :sort 2))

;; (declare-fun __epoch (node) time)
;; (declare-fun __msg (node time) Bool)
;; (declare-fun __has_lock (node) Bool)

;; (declare-fun epoch (node) time)
;; (declare-fun msg (node time) Bool)
;; (declare-fun has_lock (node) Bool)

;; (define-fun .epoch ((V0 node)) time (! (__epoch V0) :next epoch))
;; (define-fun .msg ((V0 node) (V1 time)) Bool (! (__msg V0 V1) :next msg))
;; (define-fun .has_lock ((V0 node)) Bool (! (__has_lock V0) :next has_lock))

;; (declare-fun zero () time)
;; (declare-fun le (time time) Bool)
;; (declare-fun first () node)

;; (define-fun .zero () time (! zero :global true))
;; (define-fun .le ((V0 time) (V1 time)) Bool (! (le V0 V1) :global true))
;; (define-fun .first () node (! first :global true))

;; (define-fun .prop () Bool (! 
;;  (let (($v (forall ((X node) (Y node)) (not (and (not (= X Y)) (__has_lock X) (__has_lock Y))))
;;  ))
;;  (and $v))
;;  :invar-property 0))

;; (define-fun .axiom () Bool (! 
;;  (let (($v (and (forall ((X time)) (le X X)) (forall ((X time) (Y time) (Z time)) (=> (and (le X Y) (le Y Z)) (le X Z))) (forall ((X time) (Y time)) (=> (and (le X Y) (le Y X)) (= X Y))) (forall ((X time) (Y time)) (or (le X Y) (le Y X))) (forall ((X time)) (le zero X)))
;;  ))
;;  (and $v))
;;  :axiom true))

;; (define-fun .init () Bool (! 
;;  (let (($v (and (forall ((V0 node)) (= (__has_lock V0) (= V0 first))) (forall ((V0 node) (V1 time)) (= (__msg V0 V1) false)) (forall ((V0 node)) (= (__epoch V0) zero)))
;;  ))
;;  (and $v))
;;  :init true))

;; (define-fun .action_ext:release_lock () Bool (! 
;;  (let (($v (exists ((V__fml:t time) (V__fml:x node) (V__fml:y node)) (and (forall ((V0 node)) (= (has_lock V0) (ite (= V0 V__fml:x) false (__has_lock V0)))) (forall ((V0 node) (V1 time)) (= (msg V0 V1) (ite (and (= V0 V__fml:y) (= V1 V__fml:t)) true (__msg V0 V1)))) (__has_lock V__fml:x) (not (le V__fml:t (__epoch V__fml:x)))))
;;  ))
;;  (and $v))
;;  :action ext:release_lock))

;; (define-fun .action_ext:take_lock () Bool (! 
;;  (let (($v (exists ((V__fml:t time) (V__fml:y node)) (and (forall ((V0 node)) (= (has_lock V0) (ite (= V0 V__fml:y) true (__has_lock V0)))) (forall ((V0 node)) (= (epoch V0) (ite (= V0 V__fml:y) V__fml:t (__epoch V0)))) (__msg V__fml:y V__fml:t) (not (le V__fml:t (__epoch V__fml:y)))))
;;  ))
;;  (and $v))
;;  :action ext:take_lock))

