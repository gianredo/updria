(declare-sort node 0)
(declare-sort nodeset 0)

(define-fun .node ((S node)) node (! S :sort 2))
(define-fun .nodeset ((S nodeset)) nodeset (! S :sort 2))

(declare-fun __vote (node node) Bool)
(declare-fun __leader (node) Bool)
(declare-fun __voters (node nodeset) Bool)

(declare-fun vote (node node) Bool)
(declare-fun leader (node) Bool)
(declare-fun voters (node nodeset) Bool)

(define-fun .vote ((V0 node) (V1 node)) Bool (! (__vote V0 V1) :next vote))
(define-fun .leader ((V0 node)) Bool (! (__leader V0) :next leader))
(define-fun .voters ((V0 node) (V1 nodeset)) Bool (! (__voters V0 V1) :next voters))

(declare-fun emptyset () nodeset)
(declare-fun majority (nodeset) Bool)
(declare-fun member (node nodeset) Bool)

(define-fun .emptyset () nodeset (! emptyset :global true))
(define-fun .majority ((V0 nodeset)) Bool (! (majority V0) :global true))
(define-fun .member ((V0 node) (V1 nodeset)) Bool (! (member V0 V1) :global true))

(define-fun .prop () Bool (! 
 (let (($v (forall ((X node) (Y node)) (=> (and (__leader X) (__leader Y)) (= X Y)))
 ))
 (and $v))
 :invar-property 0))

(define-fun .axiom () Bool (! 
 (let (($v (and (forall ((S1 nodeset) (S2 nodeset)) (=> (and (majority S1) (majority S2)) (exists ((N node)) (and (member N S1) (member N S2))))) (forall ((N node)) (not (member N emptyset))))
 ))
 (and $v))
 :axiom true))

(define-fun .init () Bool (! 
 (let (($v (and (forall ((V0 node) (V1 node)) (= (__vote V0 V1) false)) (forall ((V0 node)) (= (__leader V0) false)) (forall ((V0 node) (V1 nodeset)) (= (__voters V0 V1) (= V1 emptyset))))
 ))
 (and $v))
 :init true))

(define-fun .action_ext:become_leader () Bool (! 
 (let (($v (exists ((V__fml:n node) (V__fml:vs nodeset)) (and (forall ((V0 node)) (= (leader V0) (ite (= V0 V__fml:n) true (__leader V0)))) (__voters V__fml:n V__fml:vs) (majority V__fml:vs)))
 ))
 (and $v))
 :action ext:become_leader))

(define-fun .action_ext:voting () Bool (! 
 (let (($v (exists ((V__fml:n1 node) (V__fml:n2 node)) (and (forall ((V0 node) (V1 node)) (= (vote V0 V1) (ite (and (= V0 V__fml:n1) (= V1 V__fml:n2)) true (__vote V0 V1)))) (forall ((Y node)) (not (__vote V__fml:n1 Y)))))
 ))
 (and $v))
 :action ext:voting))

(define-fun .action_ns.add () Bool (! 
 (let (($v (exists ((V__fml:n node) (V__fml:s1 nodeset) (V__fml:s2 nodeset)) (and (forall ((N node)) (= (member N V__fml:s2) (or (member N V__fml:s1) (= N V__fml:n)))) (=> (majority V__fml:s1) (majority V__fml:s2))))
 ))
 (and $v))
 :action ns.add))

(define-fun .action_ext:receive_vote () Bool (! 
 (let (($v (exists ((V__fml:n node) (V__fml:s2 nodeset) (V__fml:voter node) (V__fml:vs nodeset) (V__new_fml:n node) (V__new_fml:s1 nodeset) (V__new_fml:vs nodeset)) (and (= V__new_fml:n V__fml:voter) (= V__new_fml:s1 V__fml:vs) (= V__new_fml:vs V__fml:s2) (forall ((V0 node) (V1 nodeset)) (= (voters V0 V1) (ite (= V0 V__fml:n) (= V1 V__new_fml:vs) (__voters V0 V1)))) (__vote V__fml:voter V__fml:n) (__voters V__fml:n V__fml:vs) (not (member V__fml:voter V__fml:vs)) (forall ((N node)) (= (member N V__fml:s2) (or (member N V__new_fml:s1) (= N V__new_fml:n)))) (=> (majority V__new_fml:s1) (majority V__fml:s2))))
 ))
 (and $v))
 :action ext:receive_vote))

