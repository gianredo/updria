
:comment locations are introduced to translate the program into transitions
:comment location 8 is added to encode a state where the negation 
:comment of the maximality property (see below) is violated.  This is so
:comment because the property is of the form \forall\exists and its 
:comment negation becomes \exists\forall which can be expressed as
:comment a guard of a transition (although the resulting system is 
:comment only approximated by the stopping-failure model!)
:smt (define-type locations (subrange 1 8))
:comment states: 1->playing, 2->won, 3->lost
:smt (define-type states    (subrange 1 3))
:comment prob: 1->H, 2->L
:smt (define-type prob      (subrange 1 2))
:comment phases: shifted right one step, i.e. 0->1, 1->2, 2->3
:smt (define-type phases    (subrange 1 3))

:smt (define Q::(-> int int bool))



:comment a for control locations (see comment above)
:comment s->state, v->val, p->phase
:local a locations
:local s states
:local v prob
:local p phases
:comment w and l below are history variables used only
:comment to be able to express the properties of stability
:comment for won and lost (see below)
:comment w is a boolean flag that becomes true only when
:comment the corresponding process goes to state won.
:local w bool
:comment l is similar to the w flag, but it is set to true
:comment when the process goes to state lost.

:local l bool


:comment Q is the adjacency matrix and it is symmetric
:system_axiom
:var x
:var y
:cnj (= (Q x y) (Q y x))

:system_axiom
:var x
:cnj (not (Q x x))

:initial 
:var x
:cnj (= a[x] 1) (= s[x] 1) (= p[x] 1) (= w[x] false) (= l[x] false)

:comment Independence prop. (negated)
:suggested_negated_invariants
:var z1
:var z2
:cnj (Q z1 z2) (= s[z1] 2) (= s[z2] 2)
:end_of_suggested_negated_invariants

:comment Maximality prop. (negated)
:suggested_negated_invariants
:var z1
:cnj (= a[z1] 8)
:end_of_suggested_negated_invariants

:comment Non-drift (negated)
:suggested_negated_invariants
:var z1
:var z2
:cnj (= s[z1] 1) (= s[z2] 1) (Q z1 z2) (> (+ p[z2] (* -1 p[z1])) 1)
:end_of_suggested_negated_invariants

:comment The stability property for won and lost is expressed as follows:
:comment    \Box (state[i]=won \rightarrow \Box (state[i] = won))
:comment    \Box (state[i]=lost \rightarrow \Box (state[i] = lost))
:comment Since we can only verify properties without nesting \Box'es,
:comment we introduce two history variables which become true (and
:comment remain so) so as to eliminate the inner \Box.

:comment Stability for won (negated)
:suggested_negated_invariants
:var z1
:cnj (= s[z1] 2) (= w[z1] false)
:end_of_suggested_negated_invariants

:comment Stability for lost (negated)
:unsafe 
:var x 
:cnj (= s[x] 3) (= l[x] false)

:comment entering the while loop t1
:transition
:var x
:var j
:guard (= a[x] 1) (= s[x] 1) 
:numcases 2
:case (= x j)    
:val 2
:val s[x]
:val v[x]
:val p[x]
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]

:comment exiting the while loop t2
:transition
:var x
:var j
:guard (= a[x] 1) (not (= s[x] 1)) 
:numcases 2
:case (= x j)    
:val 7
:val s[x]
:val v[x]
:val p[x]
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]


:comment await statement t3
:transition
:var x
:var j
:guard (= a[x] 2)
:uguard (not (Q x j))
:uguard (not (= s[j] 1))
:uguard (= p[j] p[x])
:uguard (= p[x] 1) (= p[j] 2)
:uguard (= p[x] 2) (= p[j] 3)
:uguard (= p[x] 3) (= p[j] 1)
:numcases 2
:case (= x j)    
:val 3
:val s[x]
:val v[x]
:val p[x]
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]

:comment 1st if-then (non-det, val := H)
:transition
:var x
:var j
:guard (= a[x] 3) (= p[x] 1) 
:numcases 2
:case (= x j)    
:val 6
:val s[x]
:val 1
:val p[x]
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]


:comment 1st if-then (non-det, val := L)
:transition
:var x
:var j
:guard (= a[x] 3) (= p[x] 1) 
:numcases 2
:case (= x j)    
:val 6
:val s[x]
:val 2
:val p[x]
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]


:comment 1st if-else
:transition
:var x
:var j
:guard (= a[x] 3) (not (= p[x] 1))
:numcases 2
:case (= x j)    
:val 4
:val s[x]
:val v[x]
:val p[x]
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]

:comment 2nd if-then
:transition
:var x
:var j
:guard (= a[x] 4) (= p[x] 2) (= v[x] 1)
:uguard (not (Q x j))
:uguard (Q x j) (= v[j] 2)
:numcases 2
:case (= x j)    
:val 6
:val 2
:val v[x]
:val p[x]
:val true
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]


:comment 2nd if-else (a) 
:transition
:var x
:var j
:guard (= a[x] 4) (not (= p[x] 2))
:numcases 2
:case (= x j)    
:val 5
:val s[x]
:val v[x]
:val p[x]
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]

:comment 2nd if-else (b) 
:transition
:var x
:var j
:guard (= a[x] 4) (= v[x] 2)
:numcases 2
:case (= x j)    
:val 5
:val s[x]
:val v[x]
:val p[x]
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]


:comment 2nd if-else (c) 
:transition
:var x
:var y
:var j
:guard (= a[x] 4) (Q x y) (= v[y] 1)
:numcases 2
:case (= x j)    
:val 5
:val s[x]
:val v[x]
:val p[x]
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]


:comment 3rd if-then
:transition
:var x
:var y
:var j
:guard (= a[x] 5) (= p[x] 3) (Q x y) (= s[y] 2)
:numcases 2
:case (= x j)    
:val 6
:val 3
:val v[x]
:val p[x]
:val w[x]
:val true
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]


:comment last assignment (a)
:transition
:var x
:var j
:guard (= a[x] 6) (= p[x] 1)
:numcases 2
:case (= x j)    
:val 1
:val s[x]
:val v[x]
:val 2
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]


:comment last assignment (b)
:transition
:var x
:var j
:guard (= a[x] 6) (= p[x] 2)
:numcases 2
:case (= x j)    
:val 1
:val s[x]
:val v[x]
:val 3
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]


:comment last assignment (c)
:transition
:var x
:var j
:guard (= a[x] 6) (= p[x] 3)
:numcases 2
:case (= x j)    
:val 1
:val s[x]
:val v[x]
:val 1
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]


:comment additional transition to prove Maximality
:transition
:var x
:var j
:guard (= s[x] 3) 
:uguard (not (Q x j))
:uguard (not (= s[j] 2))
:numcases 2
:case (= x j)    
:val 8
:val s[x]
:val v[x]
:val p[x]
:val w[x]
:val l[x]
:case 
:val a[j]
:val s[j]
:val v[j]
:val p[j]
:val w[j]
:val l[j]






