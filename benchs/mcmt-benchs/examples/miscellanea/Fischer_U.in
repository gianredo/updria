
:comment   SOURCE: this version of the Fischer protocol is taken from the UPPAAL tutorial

:smt (define-type locations ( subrange 1 4))




:smt (define k::real)

:comment    time elapsing existentially quantified variable
:eevar c real

:comment         {1=idle, 2=req, 3=wait, 4=cs}
:local d locations

:comment        f is the shared variable for pid
:comment        since (according to MCMT semantics) 0 can be a pid but -1 cannot, we use -1 for 
:comment        the value of 'no-process' 
:global f int

:comment        local clock
:local g real












:initial
:var x
:cnj  (=  f[x]  -1) (=  d[x]  1) 


:unsafe
:var z1
:var z2
:cnj (=  d[z1]  4) (=  d[z2]  4) 




:comment    Time elapsing 
:comment    According to the semantics of networks of timed automata,
:comment    time elapsing should be consistent with locations invariants;
:comment    we have the  invariant g<=k  for location 2
:comment    because of MCMT syntax, we must duplicate this transition with case-split 'd[x]=2' 
:comment    or 'not d[x] = 3' 
:transition
:var x
:var j
:guard (>=  c  0) (= d[x] 2) (<= (+ g[x] c) k)
:uguard (= d[j] 2) (<= (+ g[j] c) k)
:uguard (not (= d[j] 2))
:numcases 2
:case (= x j)
 :val d[j]
 :val f[j]
 :val (+ g[j] c)
:case 
 :val d[j]
 :val f[j]
 :val (+ g[j] c)


:comment   Time elapsing 
:transition
:var x
:var j
:guard (>=  c  0) (not (= d[x] 2)) 
:uguard (= d[j] 2) (<= (+ g[j] c) k)
:uguard (not (= d[j] 2))
:numcases 2
:case (= x j)
 :val d[j]
 :val f[j]
 :val (+ g[j] c)
:case 
 :val d[j]
 :val f[j]
 :val (+ g[j] c)




:comment T 3
:transition
:var x
:var j
:guard (=  d[x]  1) (=  f[x]  -1)
:numcases 2
:case (= x j)
 :val  2
 :val f[j]
 :val 0
:case 
 :val d[j]
 :val f[j]
 :val g[j]




:comment T 4
:transition
:var x
:var j
:guard (=  d[x]  2) (<= g[x]  k) 
:numcases 2
:case (= x j)
 :val  3
 :val x
 :val 0
:case 
 :val d[j]
 :val x
 :val g[j]




:comment T 5
:transition
:var x
:var j
:guard (=  d[x]  3)  (= f[x] -1)  
:numcases 2
:case (= x j)
 :val 2
 :val f[j]
 :val 0
:case 
 :val d[j]
 :val f[j]
 :val g[j]




:comment T 6
:transition
:var x
:var j
:guard (=  d[x]  3) (>  g[x]  k) (=  f[x] x) 
:numcases 2
:case (= x j)
 :val  4
 :val f[j]
 :val g[j]
:case 
 :val d[j]
 :val f[j]
 :val g[j]




:comment T 7
:transition
:var x
:var j
:guard (=  d[x]  4) 
:numcases 2
:case (= x j)
 :val  1
 :val  -1
 :val g[j]
:case 
 :val d[j]
 :val  -1
 :val g[j]




