


:comment       SOURCE:      Abdulla et al., FORTE 2009
:comment       this is a version of the Szymanski algorithm where the stopping failure model 
:comment       produces a spurious unsafety trace (see file sz_rep.in for repaired problem)


:smt (define-type locations (subrange 0 11))
:local a locations


:initial 
:var x
:cnj (= a[x] 0) 
 
:unsafe 
:var x 
:var y
:cnj (= a[x] 10)  (= a[y] 10)



:comment t1 r1
:transition
:var x
:var j
:guard (= a[x] 0)
:numcases 2
:case (= x j)
 :val 1
:case  
 :val a[j]
 

:comment t2 r2
:transition
:var x
:var j
:guard (= a[x] 1)
:numcases 2
:case (= x j)
 :val 2
:case  
 :val a[j]
 

:comment t3 r3
:transition
:var x
:var j
:guard (= a[x] 2)
:uguard (< a[j] 4)
:uguard (= a[j] 7)
:uguard (= a[j] 8) 
:numcases 2
:case (= x j)
 :val 3
:case  
 :val a[j]
 
:comment t4 r4
:transition
:var x
:var j
:guard (= a[x] 3)
:numcases 2
:case (= x j)
 :val 4
:case  
 :val a[j]


:comment t5 r5
:transition
:var x
:var y
:var j
:guard (= a[x] 4) (> a[y] 1) (< a[y] 4)
:numcases 2
:case (= x j)
 :val 6
:case  
 :val a[j]


:comment t6 r6
:transition
:var x
:var j
:guard (= a[x] 6)
:numcases 2
:case (= x j)
 :val 7
:case  
 :val a[j]


:comment t7 r7
:transition
:var x
:var y
:var j
:guard (= a[x] 7) (> a[y] 8) 
:numcases 2
:case (= x j)
 :val 8
:case  
 :val a[j]

:comment t8 r8
:transition
:var x
:var j
:guard (= a[x] 8)
:numcases 2
:case (= x j)
 :val 9
:case  
 :val a[j]


:comment t9 r9
:transition
:var x
:var j
:guard (= a[x] 5)
:numcases 2
:case (= x j)
 :val 9
:case  
 :val a[j]


:comment t10 r10
:transition
:var x
:var j
:guard (= a[x] 9)
:uguard (< x j)
:uguard (< a[j] 4) (> x j) 
:numcases 2
:case (= x j)
 :val 10
:case  
 :val a[j]

:comment t11 r11
:transition
:var x
:var j
:guard (= a[x] 10)
:uguard (< j x)
:uguard (< a[j] 4) (> j x) 
:uguard (> a[j] 8) (> j x) 
:numcases 2
:case (= x j)
 :val 11
:case  
 :val a[j]


:comment t12 r12
:transition
:var x
:var j
:guard (= a[x] 11)
:numcases 2
:case (= x j)
 :val 0
:case  
 :val a[j]

:comment t13 r5bis
:transition
:var x
:var j
:guard (= a[x] 4)
:uguard (< a[j] 2)  
:uguard (> a[j] 3)  
:numcases 2
:case (= x j)
 :val 5
:case  
 :val a[j]




