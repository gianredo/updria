


:comment   SOURCE:  modified from  Abdulla et al., TACAS 2007
:comment   this is the standard version  of  Dijkstra  algorithm (with a flag p containing process id's)

 
:smt (define-type locations (subrange 1 7))
:local a locations

:global p int
:local f int

:initial 
:var x
:cnj (= a[x] 1) (= p[x] -1) (= f[x] 0)
 
:unsafe 
:var x 
:var y
:cnj (= a[x] 6)  (= a[y] 6)
 


:comment t1 
:transition
:var x
:var j
:guard (= a[x] 1)
:numcases 2
:case (= x j)
 :val 2
 :val p[j]
 :val 1
:case  
 :val a[j]
 :val p[j]
 :val f[j]







:comment t2 
:transition
:var x
:var y
:var j
:guard (= a[x] 2) (= p[y] y) (= f[y] 0)
:numcases 2
:case (= x j)
 :val 3
 :val p[j]
 :val f[j]
:case (not (= x j))
 :val a[j]
 :val p[j]
 :val f[j]




:comment t2 bis
:transition
:var x
:var j
:guard (= a[x] 2) (= p[x] x) (= f[x] 0)
:numcases 2
:case (= x j)
 :val 3
 :val p[j]
 :val f[j]
:case (not (= x j))
 :val a[j]
 :val p[j]
 :val f[j]





:comment t3 
:transition
:var x
:var j
:guard (= a[x] 3) (= p[x] -1)
:numcases 2
:case (= x j)
 :val 4
 :val x
 :val f[j]
:case  (not (= x j))
 :val a[j]
 :val x
 :val f[j]







:comment t4 
:transition
:var x
:var j
:guard (= a[x] 4)
:numcases 2
:case (= x j)
 :val 5
 :val p[j]
 :val 2
:case  
 :val a[j]
 :val p[j]
 :val f[j]





:comment t5 
:transition
:var x
:var j
:guard (= a[x] 5)
:uguard (not (= f[j] 2)) 
:numcases 2
:case (= x j)
 :val 6
 :val p[j]
 :val f[j]
:case  
 :val a[j]
 :val p[j]
 :val f[j]




:comment t6
:transition
:var x
:var y
:var j
:guard (= a[x] 5)  (= f[y] 2) 
:numcases 2
:case (= x j)
 :val 1
 :val p[j]
 :val f[j]
:case    
 :val a[j]
 :val p[j]
 :val f[j]


:comment t7 
:transition
:var x
:var j
:guard (= a[x] 6)
:numcases 2
:case (= x j)
 :val 7
 :val p[j]
 :val 0
:case   
 :val a[j]
 :val p[j]
 :val f[j]



:comment t8 
:transition
:var x
:var j
:guard (= a[x] 7)
:numcases 2
:case (= x j)
 :val 1
 :val -1
 :val f[j]
:case   
 :val a[j]
 :val -1
 :val f[j]


















