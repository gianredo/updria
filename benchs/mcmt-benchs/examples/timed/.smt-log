(declare-const a Real)
(declare-const b Real)
(declare-const c Real)
(declare-const j Int)
(declare-const z1 Int)
(declare-const d<z1> Int)
(declare-const d<j> Int)
(declare-const e<z1> Real)
(declare-const e<*> Real)
(declare-const e<j> Real)
(declare-const f<z1> Int)
(declare-const f<*> Int)
(declare-const f<j> Int)
(declare-const g<z1> Real)
(declare-const g<j> Real)
(declare-const h<z1> Real)
(declare-const h<j> Real)
(declare-const z2 Int)
(declare-const d<z2> Int)
(declare-const e<z2> Real)
(declare-const f<z2> Int)
(declare-const g<z2> Real)
(declare-const h<z2> Real)
(declare-const z3 Int)
(declare-const d<z3> Int)
(declare-const e<z3> Real)
(declare-const f<z3> Int)
(declare-const g<z3> Real)
(declare-const h<z3> Real)
(declare-const z4 Int)
(declare-const d<z4> Int)
(declare-const e<z4> Real)
(declare-const f<z4> Int)
(declare-const g<z4> Real)
(declare-const h<z4> Real)
(declare-const z5 Int)
(declare-const d<z5> Int)
(declare-const e<z5> Real)
(declare-const f<z5> Int)
(declare-const g<z5> Real)
(declare-const h<z5> Real)
(declare-const z6 Int)
(declare-const d<z6> Int)
(declare-const e<z6> Real)
(declare-const f<z6> Int)
(declare-const g<z6> Real)
(declare-const h<z6> Real)
(declare-const z7 Int)
(declare-const d<z7> Int)
(declare-const e<z7> Real)
(declare-const f<z7> Int)
(declare-const g<z7> Real)
(declare-const h<z7> Real)
(declare-const z8 Int)
(declare-const d<z8> Int)
(declare-const e<z8> Real)
(declare-const f<z8> Int)
(declare-const g<z8> Real)
(declare-const h<z8> Real)
(declare-const z9 Int)
(declare-const d<z9> Int)
(declare-const e<z9> Real)
(declare-const f<z9> Int)
(declare-const g<z9> Real)
(declare-const h<z9> Real)
(assert (not (= z2 z1)))
(assert (= e<z1> e<*>))
(assert (= e<z2> e<*>))
(assert (= e<j> e<*>))
(assert (= f<z1> f<*>))
(assert (= f<z2> f<*>))
(assert (= f<j> f<*>))
(assert (>= z1 0))
(assert (>= z2 0))
(assert (and (>= d<z1> 1) (<= d<z1> 5)))
(assert (and (>= d<z2> 1) (<= d<z2> 5)))
(check-sat)
(declare-const x Int)
(declare-const y Int)
(declare-const d<x> Int)
(declare-const d<y> Int)
(declare-const e<x> Real)
(declare-const e<y> Real)
(declare-const f<x> Int)
(declare-const f<y> Int)
(declare-const g<x> Real)
(declare-const g<y> Real)
(declare-const h<x> Real)
(declare-const h<y> Real)
(define-fun initial ( (x Int) (d<x> Int) (e<x> Real) (f<x> Int) (g<x> Real) (h<x> Real)) Bool (and (= e<x> 0) (= f<x> -1) (= d<x> 1)))
(check-sat)
(define-fun r<0> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (= d<z1> 5) (= d<z2> 5)))
(check-sat)
(push)
;;Parsing tests 
(check-sat)
(declare-const test1 Int)
(declare-const test2 Real)
(declare-const test3 Int)
(declare-const test4 Real)
(declare-const test5 Real)
(push)
(assert (and (> c 0)))
(check-sat)
(pop)
(push)
(assert (and true true (= d<j> 3) (<= (+ e<j> c) (+ g<j> a))))
(check-sat)
(assert (and true true (= d<j> test1)))
(check-sat)
(assert (and true true (= (+ e<j> c) test2)))
(check-sat)
(assert (and true true (= f<j> test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and true true (not (= d<j> 3))))
(check-sat)
(assert (and true true (= d<j> test1)))
(check-sat)
(assert (and true true (= (+ e<j> c) test2)))
(check-sat)
(assert (and true true (= f<j> test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and (= d<x> 1)))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= 2 test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= f<j> test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= d<j> test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= f<j> test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and (= d<x> 2) (= f<x> -1)))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= 3 test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= f<j> test3)))
(check-sat)
(assert (and true true (= e<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= d<j> test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= f<j> test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and (= d<x> 3) (<= e<x> (+ g<x> a))))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= 4 test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= x test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= e<j> test5)))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= d<j> test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= x test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and (= d<x> 4) (>= e<x> (+ h<x> b)) (not (= f<x> x))))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= 2 test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= f<j> test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= d<j> test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= f<j> test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and (= d<x> 4) (>= e<x> (+ h<x> b)) (= f<x> x)))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= 5 test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= f<j> test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= d<j> test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= f<j> test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and (= d<x> 5)))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= 1 test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= -1 test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(push)
(assert (and true true))
(check-sat)
(assert (and true true (= d<j> test1)))
(check-sat)
(assert (and true true (= e<j> test2)))
(check-sat)
(assert (and true true (= -1 test3)))
(check-sat)
(assert (and true true (= g<j> test4)))
(check-sat)
(assert (and true true (= h<j> test5)))
(check-sat)
(pop)
(pop)
;;End of parsing tests 

;;Trying to Accelerate Transitions

(push)
(assert (and (> c 0) (not (= e<z1> (+ e<z1> c))))) 
(check-sat)
(pop)
(push)
(assert (and (> c 0) (not (= f<z1> f<z1>)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 1) (not (= e<z1> e<z1>)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 1) (not (= f<z1> f<z1>)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 2) (= f<z1> -1) (not (= e<z1> e<z1>)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 2) (= f<z1> -1) (not (= f<z1> f<z1>)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 3) (<= e<z1> (+ g<z1> a)) (not (= e<z1> e<z1>)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 3) (<= e<z1> (+ g<z1> a)) (not (= f<z1> z2)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 4) (>= e<z1> (+ h<z1> b)) (not (= f<z1> z1)) (not (= e<z1> e<z1>)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 4) (>= e<z1> (+ h<z1> b)) (not (= f<z1> z1)) (not (= f<z1> f<z1>)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 4) (>= e<z1> (+ h<z1> b)) (= f<z1> z1) (not (= e<z1> e<z1>)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 4) (>= e<z1> (+ h<z1> b)) (= f<z1> z1) (not (= f<z1> f<z1>)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 5) (not (= e<z1> e<z1>)))) 
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 5) (not (= f<z1> -1)))) 
(check-sat)
(pop)

;;End Of Acceleration Trying

(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<0> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[0] along transition 1 
(push)
(assert (and (< 0 c) (= d<z1> 5) (= d<z2> 5)))
(check-sat)
(assert (not (r<0> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<0> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
(assert (= e<z3> e<*>))
(assert (= f<z3> f<*>))
(assert (not (= z3 z1)))
(assert (not (= z3 z2)))
(assert (>= z3 0))
(assert (and (>= d<z3> 1) (<= d<z3> 5)))
;;Part of the preimage of node r[0] along transition 4 
(push)
(assert (and (<= e<z1> (+ a g<z3>)) (= d<z1> 5) (= d<z2> 5) (= d<z3> 3)))
(check-sat)
(assert (not (r<0> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<0> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[0] along transition 6 
(push)
(assert (and (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= z1 f<z1>)))
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 4) (= d<z2> 5) (= z1 f<z1>)))
(assert (not (<= (+ b h<z1>) e<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b h<z1>) e<z1>) (= d<z2> 5) (= z1 f<z1>)))
(assert (not (= d<z1> 4)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= z1 f<z1>)))
(assert (not (= d<z2> 5)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5)))
(assert (not (= z1 f<z1>)))
(check-sat)
(pop)
(define-fun r<1> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= z1 f<z1>)))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[0] along transition 6 
(push)
(assert (and (<= (+ b h<z2>) e<z1>) (= d<z1> 5) (= d<z2> 4) (= z2 f<z1>)))
(check-sat)
(assert (not (r<1> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[0] along transition 7 
(push)
(assert (and (= d<z1> 5) (= d<z2> 5) (= d<z3> 5)))
(check-sat)
(assert (not (r<0> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<0> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<0> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<0> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<0> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<0> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Backward simplification test for node 1 
(push)
(assert (and (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= z1 f<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[1] along transition 1 
(push)
(assert (and (<= (+ b h<z1>) (+ c e<z1>)) (< 0 c) (= d<z1> 4) (= d<z2> 5) (= z1 f<z1>)))
(check-sat)
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
(push)
(assert (and (= d<z2> 5) (= z1 f<z1>)))
(assert (not (= d<z1> 4)))
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 4) (= z1 f<z1>)))
(assert (not (= d<z2> 5)))
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 4) (= d<z2> 5)))
(assert (not (= z1 f<z1>)))
(check-sat)
(pop)
(define-fun r<2> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (= d<z1> 4) (= d<z2> 5) (= z1 f<z1>)))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[1] along transition 4 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= b 0) (= d<z1> 3) (= d<z2> 5)))
(check-sat)
(pop)
(push)
(assert (and (<= b 0) (= d<z1> 3) (= d<z2> 5)))
(assert (not (<= e<z1> (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 5)))
(assert (not (<= b 0)))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= b 0) (= d<z2> 5)))
(assert (not (= d<z1> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= b 0) (= d<z1> 3)))
(assert (not (= d<z2> 5)))
(check-sat)
(pop)
(define-fun r<3> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= e<z1> (+ a g<z1>)) (<= b 0) (= d<z1> 3) (= d<z2> 5)))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<3> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[1] along transition 4 
(push)
(assert (and (<= e<z1> (+ a g<z3>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= d<z3> 3) (= z3 z1)))
(check-sat)
(pop)
;;Part of the preimage of node r[1] along transition 6 
(push)
(assert (and (<= (+ b h<z1>) e<z1>) (<= (+ b h<z2>) e<z1>) (= d<z1> 4) (= d<z2> 4) (= z1 f<z1>) (= z2 f<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[1] along transition 7 
(push)
(assert (and (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= d<z3> 5) (= 0 (+ 1 z1))))
(check-sat)
(pop)
;;Backward simplification test for node 2 
(push)
(assert (and (= d<z1> 4) (= d<z2> 5) (= z1 f<z1>)))
(check-sat)
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[2] along transition 1 
(push)
(assert (and (< 0 c) (= d<z1> 4) (= d<z2> 5) (= z1 f<z1>)))
(check-sat)
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[2] along transition 4 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 5)))
(check-sat)
(assert (not (r<3> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 3) (= d<z2> 5)))
(assert (not (<= e<z1> (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (= d<z2> 5)))
(assert (not (= d<z1> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (= d<z1> 3)))
(assert (not (= d<z2> 5)))
(check-sat)
(pop)
(define-fun r<4> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 5)))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<4> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[2] along transition 4 
(push)
(assert (and (<= e<z1> (+ a g<z3>)) (= d<z1> 4) (= d<z2> 5) (= d<z3> 3) (= z3 z1)))
(check-sat)
(pop)
;;Part of the preimage of node r[2] along transition 6 
(push)
(assert (and (<= (+ b h<z2>) e<z1>) (= d<z1> 4) (= d<z2> 4) (= z1 f<z1>) (= z2 f<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[2] along transition 7 
(push)
(assert (and (= d<z1> 4) (= d<z2> 5) (= d<z3> 5) (= 0 (+ 1 z1))))
(check-sat)
(pop)
;;Backward simplification test for node 3 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= b 0) (= d<z1> 3) (= d<z2> 5)))
(check-sat)
(assert (not (r<4> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Backward simplification test for node 4 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 5)))
(check-sat)
(pop)
;;Part of the preimage of node r[4] along transition 1 
(push)
(assert (and (<= (+ c e<z1>) (+ a g<z1>)) (< 0 c) (= d<z1> 3) (= d<z2> 5)))
(check-sat)
(assert (not (r<4> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[4] along transition 3 
(push)
(assert (and (<= 0 a) (= d<z1> 2) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 2) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 2)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z1> 2) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 5)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z1> 2) (= d<z2> 5)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<5> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (= d<z1> 2) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<5> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[4] along transition 4 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z3>)) (= d<z1> 3) (= d<z2> 5) (= d<z3> 3)))
(check-sat)
(assert (not (r<4> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<4> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[4] along transition 6 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= z2 f<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= z2 f<z1>)))
(assert (not (<= e<z1> (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= z2 f<z1>)))
(assert (not (<= (+ b h<z2>) e<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z2> 4) (= z2 f<z1>)))
(assert (not (= d<z1> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= z2 f<z1>)))
(assert (not (= d<z2> 4)))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4)))
(assert (not (= z2 f<z1>)))
(check-sat)
(pop)
(define-fun r<6> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= z2 f<z1>)))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<6> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[4] along transition 7 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 5) (= d<z3> 5)))
(check-sat)
(assert (not (r<4> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<4> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<0> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<0> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Backward simplification test for node 5 
(push)
(assert (and (<= 0 a) (= d<z1> 2) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
;;Part of the preimage of node r[5] along transition 1 
(push)
(assert (and (<= 0 a) (< 0 c) (= d<z1> 2) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<5> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[5] along transition 2 
(push)
(assert (and (<= 0 a) (= d<z1> 1) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 1) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 1)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z1> 1) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 5)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z1> 1) (= d<z2> 5)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<7> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (= d<z1> 1) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<7> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[5] along transition 4 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z3>)) (= d<z1> 2) (= d<z2> 5) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[5] along transition 5 
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(check-sat)
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z1> 4) (= d<z2> 5) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= (+ b h<z1>) e<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) e<z1>) (= d<z2> 5) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (= d<z1> 4)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (= d<z2> 5)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (not (= z1 f<z1>))))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(assert (not (not (= z1 f<z1>))))
(check-sat)
(pop)
(define-fun r<8> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<8> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[5] along transition 6 
(push)
(assert (and (<= 0 a) (<= (+ b h<z2>) e<z1>) (= d<z1> 2) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (= z2 f<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[5] along transition 7 
(push)
(assert (and (<= 0 a) (= d<z1> 2) (= d<z2> 5) (= d<z3> 5)))
(check-sat)
(assert (not (r<5> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<5> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<0> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<0> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Backward simplification test for node 6 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= z2 f<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[6] along transition 1 
(push)
(assert (and (<= (+ c e<z1>) (+ a g<z1>)) (<= (+ b h<z2>) (+ c e<z1>)) (< 0 c) (= d<z1> 3) (= d<z2> 4) (= z2 f<z1>)))
(check-sat)
(assert (not (r<6> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
(push)
(assert (and (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= z2 f<z1>)))
(assert (not (<= (+ b h<z2>) (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b h<z2>) (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= z2 f<z1>)))
(assert (not (< e<z1> (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z2> 4) (= z2 f<z1>)))
(assert (not (= d<z1> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= z2 f<z1>)))
(assert (not (= d<z2> 4)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4)))
(assert (not (= z2 f<z1>)))
(check-sat)
(pop)
(define-fun r<9> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= (+ b h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= z2 f<z1>)))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<9> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[6] along transition 3 
(push)
(assert (and (<= 0 a) (<= (+ b h<z2>) e<z1>) (= d<z1> 2) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (= z2 f<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[6] along transition 4 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 3) (= d<z2> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 3) (= d<z2> 3)))
(assert (not (<= e<z1> (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= b 0) (= d<z1> 3) (= d<z2> 3)))
(assert (not (<= e<z1> (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (= d<z1> 3) (= d<z2> 3)))
(assert (not (<= b 0)))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z2> 3)))
(assert (not (= d<z1> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 3)))
(assert (not (= d<z2> 3)))
(check-sat)
(pop)
(define-fun r<10> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 3) (= d<z2> 3)))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<10> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[6] along transition 4 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z3>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= d<z3> 3) (= z3 z2)))
(check-sat)
(pop)
;;Part of the preimage of node r[6] along transition 7 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= d<z3> 5) (= 0 (+ 1 z2))))
(check-sat)
(pop)
;;Backward simplification test for node 7 
(push)
(assert (and (<= 0 a) (= d<z1> 1) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
;;Part of the preimage of node r[7] along transition 1 
(push)
(assert (and (<= 0 a) (< 0 c) (= d<z1> 1) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<7> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[7] along transition 4 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z3>)) (= d<z1> 1) (= d<z2> 5) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[7] along transition 6 
(push)
(assert (and (<= 0 a) (<= (+ b h<z2>) e<z1>) (= d<z1> 1) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (= z2 f<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[7] along transition 7 
(push)
(assert (and (<= 0 a) (= d<z1> 5) (= d<z2> 5)))
(check-sat)
(assert (not (r<0> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<0> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[7] along transition 7 
(push)
(assert (and (<= 0 a) (= d<z1> 1) (= d<z2> 5) (= d<z3> 5)))
(check-sat)
(assert (not (r<7> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<7> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<0> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<0> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Backward simplification test for node 8 
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[8] along transition 1 
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) (+ c e<z1>)) (< 0 c) (= d<z1> 4) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<8> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
(push)
(assert (and (= d<z1> 4) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 4)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z1> 4) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 5)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z1> 4) (= d<z2> 5)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<11> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (= d<z1> 4) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<11> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[8] along transition 4 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z1>)) (<= b 0) (= d<z1> 3) (= d<z2> 5) (= 0 (+ 1 z1))))
(check-sat)
(pop)
;;Part of the preimage of node r[8] along transition 4 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z3>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[8] along transition 6 
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) e<z1>) (<= (+ b h<z2>) e<z1>) (= d<z1> 4) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (= z2 f<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[8] along transition 7 
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 5) (= d<z3> 5)))
(check-sat)
(assert (not (r<11> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<11> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<8> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<8> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(assert (not (r<0> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<0> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Backward simplification test for node 9 
(push)
(assert (and (<= (+ b h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= z2 f<z1>)))
(check-sat)
(assert (not (r<6> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[9] along transition 1 
(push)
(assert (and (<= (+ b h<z2>) (+ a g<z1>)) (< (+ c e<z1>) (+ a g<z1>)) (< 0 c) (= d<z1> 3) (= d<z2> 4) (= z2 f<z1>)))
(check-sat)
(assert (not (r<9> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<6> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[9] along transition 3 
(push)
(assert (and (< 0 a) (<= (+ b h<z2>) (+ a e<z1>)) (= d<z1> 2) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (= z2 f<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[9] along transition 4 
(push)
(assert (and (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (= d<z1> 3) (= d<z2> 3)))
(check-sat)
(assert (not (r<10> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<10> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
(push)
(assert (and (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (= d<z1> 3) (= d<z2> 3)))
(assert (not (<= (+ b e<z1>) (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b e<z1>) (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (= d<z1> 3) (= d<z2> 3)))
(assert (not (< e<z1> (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 3)))
(assert (not (<= e<z1> (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (= d<z2> 3)))
(assert (not (= d<z1> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (= d<z1> 3)))
(assert (not (= d<z2> 3)))
(check-sat)
(pop)
(define-fun r<12> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (= d<z1> 3) (= d<z2> 3)))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<12> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[9] along transition 4 
(push)
(assert (and (<= (+ b h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z3>)) (= d<z1> 3) (= d<z2> 4) (= d<z3> 3) (= z3 z2)))
(check-sat)
(pop)
;;Part of the preimage of node r[9] along transition 7 
(push)
(assert (and (<= (+ b h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= d<z3> 5) (= 0 (+ 1 z2))))
(check-sat)
(pop)
;;Backward simplification test for node 10 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 3) (= d<z2> 3)))
(check-sat)
(assert (not (r<12> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<12> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[10] along transition 1 
(push)
(assert (and (<= (+ c e<z1>) (+ a g<z1>)) (<= (+ c e<z1>) (+ a g<z2>)) (<= b 0) (< 0 c) (= d<z1> 3) (= d<z2> 3)))
(check-sat)
(assert (not (r<12> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<12> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<10> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<10> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[10] along transition 3 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= e<z1> (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= b 0)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 2)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 2) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 2) (= d<z2> 3)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<13> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<13> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[10] along transition 3 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z1>)) (<= b 0) (= d<z1> 3) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<13> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[10] along transition 4 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (<= e<z1> (+ a g<z3>)) (<= b 0) (= d<z1> 3) (= d<z2> 3) (= d<z3> 3)))
(check-sat)
(assert (not (r<12> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<12> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<12> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<12> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<12> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<12> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(assert (not (r<10> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<10> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<10> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<10> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<10> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<10> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[10] along transition 7 
(push)
(assert (and (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 3) (= d<z2> 3) (= d<z3> 5)))
(check-sat)
(assert (not (r<12> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<12> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<10> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<10> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Backward simplification test for node 11 
(push)
(assert (and (<= 0 a) (= d<z1> 4) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<8> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[11] along transition 1 
(push)
(assert (and (<= 0 a) (< 0 c) (= d<z1> 4) (= d<z2> 5) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<11> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<8> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[11] along transition 4 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 5) (= 0 (+ 1 z1))))
(check-sat)
(pop)
;;Part of the preimage of node r[11] along transition 4 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z3>)) (= d<z1> 4) (= d<z2> 5) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[11] along transition 6 
(push)
(assert (and (<= 0 a) (<= (+ b h<z2>) e<z1>) (= d<z1> 4) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (= z2 f<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[11] along transition 7 
(push)
(assert (and (<= 0 a) (= d<z1> 4) (= d<z2> 5) (= d<z3> 5)))
(check-sat)
(assert (not (r<11> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<11> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<8> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<8> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(assert (not (r<0> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<0> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Backward simplification test for node 12 
(push)
(assert (and (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (= d<z1> 3) (= d<z2> 3)))
(check-sat)
(assert (not (r<10> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<10> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[12] along transition 1 
(push)
(assert (and (<= (+ b c e<z1>) (+ a g<z1>)) (< (+ c e<z1>) (+ a g<z1>)) (<= (+ c e<z1>) (+ a g<z2>)) (< 0 c) (= d<z1> 3) (= d<z2> 3)))
(check-sat)
(assert (not (r<12> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<12> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<10> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<10> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[12] along transition 3 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<13> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
(push)
(assert (and (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (< 0 a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= e<z1> (+ a g<z2>)) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= b a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= e<z1> (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 2)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 2) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 3)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 2) (= d<z2> 3)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<14> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<14> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[12] along transition 3 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<14> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<13> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (<= (+ b e<z1>) (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (= d<z1> 3) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (< e<z1> (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 2)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 2)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<15> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<15> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[12] along transition 4 
(push)
(assert (and (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (<= e<z1> (+ a g<z3>)) (= d<z1> 3) (= d<z2> 3) (= d<z3> 3)))
(check-sat)
(assert (not (r<12> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<12> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<12> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<12> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<12> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<12> z3 d<z3> e<z3> f<z3> g<z3> h<z3> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[12] along transition 7 
(push)
(assert (and (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (= d<z1> 3) (= d<z2> 3) (= d<z3> 5)))
(check-sat)
(assert (not (r<12> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<12> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<10> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<10> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Backward simplification test for node 13 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<15> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<14> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[13] along transition 1 
(push)
(assert (and (<= 0 a) (<= (+ c e<z1>) (+ a g<z2>)) (<= b 0) (< 0 c) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<15> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<14> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<13> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[13] along transition 2 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= e<z1> (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= b 0)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 1)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 1) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 1) (= d<z2> 3)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<16> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<16> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[13] along transition 3 
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= b 0) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (<= b 0)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 2)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 2) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 2)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 2) (= d<z2> 2)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<17> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= b 0) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<17> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[13] along transition 4 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= e<z1> (+ a g<z3>)) (<= b 0) (= d<z1> 2) (= d<z2> 3) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[13] along transition 5 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(check-sat)
(assert (not (r<9> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<6> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= e<z1> (+ a g<z2>)) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= e<z1> (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= b 0)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= (+ b h<z1>) e<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (= d<z1> 4)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (= d<z2> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (not (= z1 f<z1>))))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (not (= z1 f<z1>))))
(check-sat)
(pop)
(define-fun r<18> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<18> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[13] along transition 7 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 2) (= d<z2> 3) (= d<z3> 5)))
(check-sat)
(assert (not (r<15> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<14> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<13> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<5> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(assert (not (r<4> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(pop)
;;Backward simplification test for node 14 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<15> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<13> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[14] along transition 1 
(push)
(assert (and (< 0 a) (<= b a) (<= (+ c e<z1>) (+ a g<z2>)) (< 0 c) (= d<z1> 2) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<15> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<14> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<13> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[14] along transition 2 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<16> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
(push)
(assert (and (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (< 0 a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= e<z1> (+ a g<z2>)) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= b a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= e<z1> (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 1)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 1) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 3)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 1) (= d<z2> 3)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<19> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<19> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[14] along transition 3 
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<17> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<17> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= b a) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (< 0 a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (<= b a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 2)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 2) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 2)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z2> 2)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<20> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<20> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[14] along transition 4 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (<= e<z1> (+ a g<z3>)) (= d<z1> 2) (= d<z2> 3) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[14] along transition 5 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(check-sat)
(assert (not (r<18> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<9> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<6> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= b a) (<= e<z1> (+ a g<z2>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (< 0 a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= e<z1> (+ a g<z2>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= b a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= e<z1> (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= (+ b h<z1>) e<z1>)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (<= (+ b h<z1>) e<z1>) (= d<z2> 3) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (= d<z1> 4)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (= d<z2> 3)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (not (= z1 f<z1>))))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (not (= z1 f<z1>))))
(check-sat)
(pop)
(define-fun r<21> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<21> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[14] along transition 7 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 2) (= d<z2> 3) (= d<z3> 5)))
(check-sat)
(assert (not (r<15> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<14> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<13> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<5> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(assert (not (r<4> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(pop)
;;Backward simplification test for node 15 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<14> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<13> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[15] along transition 1 
(push)
(assert (and (<= 0 a) (<= (+ b c e<z1>) (+ a g<z1>)) (< (+ c e<z1>) (+ a g<z1>)) (< 0 c) (= d<z1> 3) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<15> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<14> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<13> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[15] along transition 2 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<19> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<16> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(assert (not (<= (+ b e<z1>) (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (= d<z1> 3) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(assert (not (< e<z1> (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 1)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 1)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<22> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<22> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[15] along transition 3 
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<20> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<20> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<17> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<17> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[15] along transition 4 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z3>)) (= d<z1> 3) (= d<z2> 2) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[15] along transition 5 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (not (= z2 f<z1>))))
(check-sat)
(assert (not (r<21> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<18> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<9> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<6> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (not (= z2 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (< e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (not (= z2 f<z1>))))
(assert (not (<= (+ b e<z1>) (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (not (= z2 f<z1>))))
(assert (not (< e<z1> (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (not (= z2 f<z1>))))
(assert (not (<= (+ b h<z2>) e<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (not (= z2 f<z1>))))
(assert (not (= d<z1> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= 0 (+ 1 f<z1>)) (not (= z2 f<z1>))))
(assert (not (= d<z2> 4)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (not (= z2 f<z1>))))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(assert (not (not (= z2 f<z1>))))
(check-sat)
(pop)
(define-fun r<23> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<23> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[15] along transition 7 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 2) (= d<z3> 5)))
(check-sat)
(assert (not (r<15> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<14> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<13> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<5> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(assert (not (r<4> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(pop)
;;Backward simplification test for node 16 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<22> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<19> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[16] along transition 1 
(push)
(assert (and (<= 0 a) (<= (+ c e<z1>) (+ a g<z2>)) (<= b 0) (< 0 c) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<22> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<19> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<16> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[16] along transition 3 
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= b 0) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (<= b 0)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 1)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 1) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 2)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 1) (= d<z2> 2)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<24> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= b 0) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<24> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[16] along transition 4 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= e<z1> (+ a g<z3>)) (<= b 0) (= d<z1> 1) (= d<z2> 3) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[16] along transition 7 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 5) (= d<z2> 3)))
(check-sat)
(assert (not (r<4> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[16] along transition 7 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 1) (= d<z2> 3) (= d<z3> 5)))
(check-sat)
(assert (not (r<22> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<19> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<16> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<7> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(assert (not (r<4> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(pop)
;;Backward simplification test for node 17 
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<20> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<20> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[17] along transition 1 
(push)
(assert (and (<= 0 a) (<= b 0) (< 0 c) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<20> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<20> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<17> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<17> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[17] along transition 2 
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<24> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[17] along transition 2 
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 2) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<24> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[17] along transition 4 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z3>)) (<= b 0) (= d<z1> 2) (= d<z2> 2) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[17] along transition 5 
(push)
(assert (and (<= 0 a) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= b 0)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= (+ b h<z1>) e<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z2> 2) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (= d<z1> 4)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (= d<z2> 2)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (not (= z1 f<z1>))))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (not (= z1 f<z1>))))
(check-sat)
(pop)
(define-fun r<25> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<25> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[17] along transition 5 
(push)
(assert (and (<= 0 a) (<= b 0) (<= (+ b h<z2>) e<z1>) (= d<z1> 2) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (not (= z2 f<z1>))))
(check-sat)
(assert (not (r<25> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[17] along transition 7 
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 2) (= d<z2> 2) (= d<z3> 5)))
(check-sat)
(assert (not (r<20> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<20> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<17> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<17> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(assert (not (r<5> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<5> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(pop)
(push)
(assert (and (<= b 0) (= d<z1> 2) (= d<z2> 2) (= d<z3> 5)))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z1> 2) (= d<z2> 2) (= d<z3> 5)))
(assert (not (<= b 0)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z2> 2) (= d<z3> 5)))
(assert (not (= d<z1> 2)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 2) (= d<z3> 5)))
(assert (not (= d<z2> 2)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 2) (= d<z2> 2)))
(assert (not (= d<z3> 5)))
(check-sat)
(pop)
(define-fun r<26> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real) (z3 Int) (d<z3> Int) (e<z3> Real) (f<z3> Int) (g<z3> Real) (h<z3> Real)) Bool (and (<= 0 a) (<= b 0) (= d<z1> 2) (= d<z2> 2) (= d<z3> 5)))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (initial z3 d<z3> e<z3> f<z3> g<z3> h<z3>))
(assert (r<26> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>))
(check-sat)
(pop)
;;Backward simplification test for node 18 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<23> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<21> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<9> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<6> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[18] along transition 1 
(push)
(assert (and (<= 0 a) (<= (+ c e<z1>) (+ a g<z2>)) (<= b 0) (<= (+ b h<z1>) (+ c e<z1>)) (< 0 c) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<23> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<21> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<18> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<9> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(assert (not (r<6> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (< e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= (+ b h<z1>) (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) (+ a g<z2>)) (<= b 0) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (< e<z1> (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= b 0)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (<= b 0) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 4)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 4) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 4) (= d<z2> 3)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<27> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<27> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[18] along transition 3 
(push)
(assert (and (<= 0 a) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<25> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[18] along transition 4 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 3) (= d<z2> 3) (= 0 (+ 1 z1))))
(check-sat)
(pop)
;;Part of the preimage of node r[18] along transition 4 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= e<z1> (+ a g<z3>)) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[18] along transition 7 
(push)
(assert (and (<= 0 a) (<= e<z1> (+ a g<z2>)) (<= b 0) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= d<z3> 5)))
(check-sat)
(assert (not (r<27> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<23> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<21> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<18> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(assert (not (r<11> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<9> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<8> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<6> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(assert (not (r<4> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(pop)
;;Backward simplification test for node 19 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<22> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<16> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[19] along transition 1 
(push)
(assert (and (< 0 a) (<= b a) (<= (+ c e<z1>) (+ a g<z2>)) (< 0 c) (= d<z1> 1) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<22> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<19> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<16> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[19] along transition 3 
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<24> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
(push)
(assert (and (<= b a) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (< 0 a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (<= b a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 1)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 1) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 2)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 1) (= d<z2> 2)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<28> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (< 0 a) (<= b a) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<28> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[19] along transition 4 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (<= e<z1> (+ a g<z3>)) (= d<z1> 1) (= d<z2> 3) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[19] along transition 7 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 5) (= d<z2> 3)))
(check-sat)
(assert (not (r<4> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[19] along transition 7 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (= d<z1> 1) (= d<z2> 3) (= d<z3> 5)))
(check-sat)
(assert (not (r<22> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<19> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<16> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<7> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(assert (not (r<4> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(pop)
;;Backward simplification test for node 20 
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<17> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<17> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[20] along transition 1 
(push)
(assert (and (< 0 a) (<= b a) (< 0 c) (= d<z1> 2) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<20> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<20> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<17> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<17> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[20] along transition 2 
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<28> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<24> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[20] along transition 2 
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<28> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<24> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[20] along transition 4 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z3>)) (= d<z1> 2) (= d<z2> 2) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[20] along transition 5 
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(check-sat)
(assert (not (r<25> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
(push)
(assert (and (<= b a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (< 0 a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= b a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (<= (+ b h<z1>) e<z1>)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z1>) e<z1>) (= d<z2> 2) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (= d<z1> 4)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= 0 (+ 1 f<z1>)) (not (= z1 f<z1>))))
(assert (not (= d<z2> 2)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (not (= z1 f<z1>))))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(assert (not (not (= z1 f<z1>))))
(check-sat)
(pop)
(define-fun r<29> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (< 0 a) (<= b a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<29> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[20] along transition 5 
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z2>) e<z1>) (= d<z1> 2) (= d<z2> 4) (= 0 (+ 1 f<z1>)) (not (= z2 f<z1>))))
(check-sat)
(assert (not (r<29> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<25> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[20] along transition 7 
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z2> 2) (= d<z3> 5)))
(check-sat)
(assert (not (r<26> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<26> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<20> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<20> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(assert (not (r<17> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<17> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<5> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<5> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(pop)
(push)
(assert (and (<= b a) (= d<z1> 2) (= d<z2> 2) (= d<z3> 5)))
(assert (not (< 0 a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (= d<z1> 2) (= d<z2> 2) (= d<z3> 5)))
(assert (not (<= b a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z2> 2) (= d<z3> 5)))
(assert (not (= d<z1> 2)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z3> 5)))
(assert (not (= d<z2> 2)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z2> 2)))
(assert (not (= d<z3> 5)))
(check-sat)
(pop)
(define-fun r<30> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real) (z3 Int) (d<z3> Int) (e<z3> Real) (f<z3> Int) (g<z3> Real) (h<z3> Real)) Bool (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z2> 2) (= d<z3> 5)))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (initial z3 d<z3> e<z3> f<z3> g<z3> h<z3>))
(assert (r<30> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>))
(check-sat)
(pop)
;;Backward simplification test for node 21 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<27> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<23> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<18> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<9> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(assert (not (r<6> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[21] along transition 1 
(push)
(assert (and (< 0 a) (<= b a) (<= (+ c e<z1>) (+ a g<z2>)) (<= (+ b h<z1>) (+ c e<z1>)) (< 0 c) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<27> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<23> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<21> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<18> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(assert (not (r<9> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<6> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
(push)
(assert (and (<= b a) (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (< 0 a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= b a)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (< e<z1> (+ a g<z2>)) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (<= (+ b h<z1>) (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z1>) (+ a g<z2>)) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (< e<z1> (+ a g<z2>))))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 4)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (= d<z1> 4) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 3)))
(check-sat)
(pop)
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (= d<z1> 4) (= d<z2> 3)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<31> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (< 0 a) (<= b a) (<= (+ b h<z1>) (+ a g<z2>)) (< e<z1> (+ a g<z2>)) (= d<z1> 4) (= d<z2> 3) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<31> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[21] along transition 3 
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<29> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<25> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[21] along transition 4 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 3) (= d<z2> 3) (= 0 (+ 1 z1))))
(check-sat)
(pop)
;;Part of the preimage of node r[21] along transition 4 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (<= e<z1> (+ a g<z3>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[21] along transition 7 
(push)
(assert (and (< 0 a) (<= b a) (<= e<z1> (+ a g<z2>)) (<= (+ b h<z1>) e<z1>) (= d<z1> 4) (= d<z2> 3) (= d<z3> 5)))
(check-sat)
(assert (not (r<31> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<27> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<23> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<21> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(assert (not (r<18> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<11> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<9> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<8> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(assert (not (r<6> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<4> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<2> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<1> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(pop)
;;Backward simplification test for node 22 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<19> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<16> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[22] along transition 1 
(push)
(assert (and (<= 0 a) (<= (+ b c e<z1>) (+ a g<z1>)) (< (+ c e<z1>) (+ a g<z1>)) (< 0 c) (= d<z1> 3) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<22> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<19> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<16> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[22] along transition 3 
(push)
(assert (and (< 0 a) (<= b a) (= d<z1> 2) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<28> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<24> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[22] along transition 4 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z3>)) (= d<z1> 3) (= d<z2> 1) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[22] along transition 7 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 5)))
(check-sat)
(assert (not (r<4> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[22] along transition 7 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 1) (= d<z3> 5)))
(check-sat)
(assert (not (r<22> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<19> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<16> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<7> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(assert (not (r<4> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(pop)
;;Backward simplification test for node 23 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<31> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<27> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<21> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<18> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(assert (not (r<9> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<6> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[23] along transition 1 
(push)
(assert (and (<= 0 a) (<= (+ b c e<z1>) (+ a g<z1>)) (< (+ c e<z1>) (+ a g<z1>)) (<= (+ b h<z2>) (+ c e<z1>)) (< 0 c) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<31> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<27> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<23> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<21> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(assert (not (r<18> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<9> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<6> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
(push)
(assert (and (< (+ b e<z1>) (+ a g<z1>)) (< (+ b h<z2>) (+ a g<z1>)) (<= (+ (* 2 b) h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (< (+ b h<z2>) (+ a g<z1>)) (<= (+ (* 2 b) h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(assert (not (< (+ b e<z1>) (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (< (+ b e<z1>) (+ a g<z1>)) (<= (+ (* 2 b) h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(assert (not (< (+ b h<z2>) (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (< (+ b e<z1>) (+ a g<z1>)) (< (+ b h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(assert (not (<= (+ (* 2 b) h<z2>) (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (< (+ b e<z1>) (+ a g<z1>)) (< (+ b h<z2>) (+ a g<z1>)) (<= (+ (* 2 b) h<z2>) (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(assert (not (< e<z1> (+ a g<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (< (+ b e<z1>) (+ a g<z1>)) (< (+ b h<z2>) (+ a g<z1>)) (<= (+ (* 2 b) h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 3)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (< (+ b e<z1>) (+ a g<z1>)) (< (+ b h<z2>) (+ a g<z1>)) (<= (+ (* 2 b) h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 4)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (< (+ b e<z1>) (+ a g<z1>)) (< (+ b h<z2>) (+ a g<z1>)) (<= (+ (* 2 b) h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<32> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (< (+ b e<z1>) (+ a g<z1>)) (< (+ b h<z2>) (+ a g<z1>)) (<= (+ (* 2 b) h<z2>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (= d<z1> 3) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<32> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
;;Part of the preimage of node r[23] along transition 3 
(push)
(assert (and (< 0 a) (<= b a) (<= (+ b h<z2>) e<z1>) (= d<z1> 2) (= d<z2> 4) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<29> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<25> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(check-sat)
(pop)
;;Part of the preimage of node r[23] along transition 4 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z2>)) (<= b 0) (= d<z1> 3) (= d<z2> 3) (= 0 (+ 1 z2))))
(check-sat)
(pop)
;;Part of the preimage of node r[23] along transition 4 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= e<z1> (+ a g<z3>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= d<z3> 3) (= 0 (+ 1 z3))))
(check-sat)
(pop)
;;Part of the preimage of node r[23] along transition 7 
(push)
(assert (and (<= 0 a) (<= (+ b e<z1>) (+ a g<z1>)) (< e<z1> (+ a g<z1>)) (<= (+ b h<z2>) e<z1>) (= d<z1> 3) (= d<z2> 4) (= d<z3> 5)))
(check-sat)
(assert (not (r<32> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<31> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<27> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<23> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(assert (not (r<21> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<18> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z1 d<z1> e<z1> f<z1> g<z1> h<z1>)))
(assert (not (r<11> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<9> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(assert (not (r<8> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<6> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<4> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(assert (not (r<2> z2 d<z2> e<z2> f<z2> g<z2> h<z2> z3 d<z3> e<z3> f<z3> g<z3> h<z3>)))
(check-sat)
(pop)
;;Backward simplification test for node 24 
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<28> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[24] along transition 1 
(push)
(assert (and (<= 0 a) (<= b 0) (< 0 c) (= d<z1> 1) (= d<z2> 2) (= 0 (+ 1 f<z1>))))
(check-sat)
(assert (not (r<28> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(assert (not (r<24> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>)))
(check-sat)
(pop)
;;Part of the preimage of node r[24] along transition 2 
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 1) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(push)
(assert (and (<= b 0) (= d<z1> 1) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(assert (not (<= 0 a)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (= d<z1> 1) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(assert (not (<= b 0)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z1> 1)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 1) (= 0 (+ 1 f<z1>))))
(assert (not (= d<z2> 1)))
(check-sat)
(pop)
(push)
(assert (and (<= 0 a) (<= b 0) (= d<z1> 1) (= d<z2> 1)))
(assert (not (= 0 (+ 1 f<z1>))))
(check-sat)
(pop)
(define-fun r<33> ( (z1 Int) (d<z1> Int) (e<z1> Real) (f<z1> Int) (g<z1> Real) (h<z1> Real) (z2 Int) (d<z2> Int) (e<z2> Real) (f<z2> Int) (g<z2> Real) (h<z2> Real)) Bool (and (<= 0 a) (<= b 0) (= d<z1> 1) (= d<z2> 1) (= 0 (+ 1 f<z1>))))
(push)
(assert (initial z1 d<z1> e<z1> f<z1> g<z1> h<z1>))
(assert (initial z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(assert (r<33> z1 d<z1> e<z1> f<z1> g<z1> h<z1> z2 d<z2> e<z2> f<z2> g<z2> h<z2>))
(check-sat)
(pop)
