:comment Input model:
:comment | system implementation sys.impl
:comment |     parameters
:comment |         A0: set of indices;
:comment |         A1: set of indices;
:comment |         m0_conn_a0: int;
:comment |         m0_taint_a0: bool;
:comment |         m0_conn_a1: int;
:comment |         m0_taint_a1: bool;
:comment |         m0_present: bool;
:comment | 
:comment |     initial
:comment |         m0_conn_a0 = 0 and m0_conn_a1 = 0 and m0_taint_a0 = false and m0_taint_a1 = false and forall(x in A0, x > 0) and forall(x in A1, x > 0);
:comment | 
:comment |     subcomponents
:comment |         a0: set indexed by A0;
:comment |         a1: set indexed by A1;
:comment |         m0: single if m0_present;
:comment | 
:comment |     connections
:comment |         a0[x] -> m0 if x = m0_conn_a0 for x in A0;
:comment |         m0 -> a0[x] if x = m0_conn_a0 for x in A0;
:comment |         a1[x] -> m0 if x = m0_conn_a1 for x in A1;
:comment |         m0 -> a1[x] if x = m0_conn_a1 for x in A1;
:comment | 
:comment |     reconfigurations
:comment |         exists(x not in A0, x > 0 and next(A0) = add(A0, x));
:comment |         exists(x not in A1, x > 0 and next(A1) = add(A1, x));
:comment |         exists(x in A0, next(A0) = remove(A0, x) and m0_conn_a0 != x);
:comment |         exists(x in A1, next(A1) = remove(A1, x) and m0_conn_a1 != x);
:comment |         exists(x in A0, not m0_taint_a1 and m0_conn_a0 = 0 and next(m0_conn_a0) = x and next(m0_taint_a0) = true);
:comment |         exists(x in A1, not m0_taint_a0 and m0_conn_a1 = 0 and next(m0_conn_a1) = x and next(m0_taint_a1) = true);
:comment |         next(m0_conn_a0) = 0;
:comment |         next(m0_conn_a1) = 0;
:comment |         m0_conn_a0 = 0 and m0_conn_a1 = 0 and next(m0_present) = false and next(m0_taint_a0) = false and next(m0_taint_a1) = false;
:comment |         next(m0_present) = true;
:comment | end sys.impl;

:comment Source components: a0
:comment Destination components: a1

:index int
:max_transitions_number 1000

:local _A0 bool
:local _A1 bool
:global _m0_conn_a0 int
:global _m0_taint_a0 bool
:global _m0_conn_a1 int
:global _m0_taint_a1 bool
:global _m0_present bool
:local _a0_token bool
:local _a1_token bool
:global _m0_token bool

:initial
:var x
:var y
:cnj (and (and (and (and (and (= _m0_conn_a0 0) (= _m0_conn_a1 0)) (= _m0_taint_a0 false)) (= _m0_taint_a1 false)) (=> _A0[x] (> x 0))) (=> _A1[x] (> x 0))) (= _a0_token[x] true) (= _a1_token[x] false) (= _m0_token false)

:unsafe
:var x
:cnj (= _a1_token[x] true)

:comment transition t1
:comment connection 1, case 7
:transition
:var x
:var j
:guard true (= x _m0_conn_a0) true (= _m0_present true) (= _A0[x] true) (= _a0_token[x] true)
:numcases 2
:case (= j x)
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val _a0_token[j]
:val _a1_token[j]
:val true
:case (not (= j x))
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val _a0_token[j]
:val _a1_token[j]
:val true

:comment transition t2
:comment connection 2, case 5
:transition
:var x
:var j
:guard true (= x _m0_conn_a0) (= _m0_present true) true (= _m0_token true) (= _A0[x] true)
:numcases 2
:case (= j x)
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val _a1_token[j]
:val _m0_token
:case (not (= j x))
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val _a0_token[j]
:val _a1_token[j]
:val _m0_token

:comment transition t3
:comment connection 3, case 7
:transition
:var x
:var j
:guard true (= x _m0_conn_a1) true (= _m0_present true) (= _A1[x] true) (= _a1_token[x] true)
:numcases 2
:case (= j x)
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val _a0_token[j]
:val _a1_token[j]
:val true
:case (not (= j x))
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val _a0_token[j]
:val _a1_token[j]
:val true

:comment transition t4
:comment connection 4, case 5
:transition
:var x
:var j
:guard true (= x _m0_conn_a1) (= _m0_present true) true (= _m0_token true) (= _A1[x] true)
:numcases 2
:case (= j x)
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val _a0_token[j]
:val true
:val _m0_token
:case (not (= j x))
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val _a0_token[j]
:val _a1_token[j]
:val _m0_token

:comment transition t5
:comment reconfiguration 1, case 2, transition 1 of 1, x -> x
:transition
:var j
:var x
:guard true (= _A0[x] false) (> x 0) (= _A0[x] false)
:numcases 2
:case (= x j)
:val true
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))
:case (not (= x j))
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))

:comment transition t6
:comment reconfiguration 2, case 2, transition 1 of 1, x -> x
:transition
:var j
:var x
:guard true (= _A1[x] false) (> x 0) (= _A1[x] false)
:numcases 2
:case (= x j)
:val _A0[j]
:val true
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val false
:val (and _m0_token  (= _m0_present true))
:case (not (= x j))
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))

:comment transition t7
:comment reconfiguration 3, case 2, transition 1 of 1, x -> x
:transition
:var j
:var x
:guard true (= _A0[x] true) (= _A0[x] true) (not (= _m0_conn_a0 x))
:numcases 2
:case (= x j)
:val false
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))
:case (not (= x j))
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))

:comment transition t8
:comment reconfiguration 4, case 2, transition 1 of 1, x -> x
:transition
:var j
:var x
:guard true (= _A1[x] true) (= _A1[x] true) (not (= _m0_conn_a1 x))
:numcases 2
:case (= x j)
:val _A0[j]
:val false
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val false
:val (and _m0_token  (= _m0_present true))
:case (not (= x j))
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))

:comment transition t9
:comment reconfiguration 5, case 2, transition 1 of 1, x -> x
:transition
:var j
:var x
:guard true (= _A0[x] true) (= _m0_taint_a1 false) (= _m0_conn_a0 0)
:numcases 2
:case (= x j)
:val _A0[j]
:val _A1[j]
:val x
:val true
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))
:case (not (= x j))
:val _A0[j]
:val _A1[j]
:val x
:val true
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))

:comment transition t10
:comment reconfiguration 6, case 2, transition 1 of 1, x -> x
:transition
:var j
:var x
:guard true (= _A1[x] true) (= _m0_taint_a0 false) (= _m0_conn_a1 0)
:numcases 2
:case (= x j)
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val x
:val true
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))
:case (not (= x j))
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val x
:val true
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))

:comment transition t11
:comment reconfiguration 7, case 1
:transition
:var j
:guard true
:numcases 1
:case true
:val _A0[j]
:val _A1[j]
:val 0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))

:comment transition t12
:comment reconfiguration 8, case 1
:transition
:var j
:guard true
:numcases 1
:case true
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val 0
:val _m0_taint_a1
:val _m0_present
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= _m0_present true))

:comment transition t13
:comment reconfiguration 9, case 1
:transition
:var j
:guard true (= _m0_conn_a0 0) (= _m0_conn_a1 0)
:numcases 1
:case true
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val false
:val _m0_conn_a1
:val false
:val false
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= false true))

:comment transition t14
:comment reconfiguration 10, case 1
:transition
:var j
:guard true
:numcases 1
:case true
:val _A0[j]
:val _A1[j]
:val _m0_conn_a0
:val _m0_taint_a0
:val _m0_conn_a1
:val _m0_taint_a1
:val true
:val true
:val (and _a1_token[j] true)
:val (and _m0_token  (= true true))
