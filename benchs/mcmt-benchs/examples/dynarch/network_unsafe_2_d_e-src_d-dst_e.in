:comment Input model:
:comment | system implementation sys.impl
:comment |     parameters
:comment |         C0: set of indices;
:comment |         trustedClients0: set indexed by C0 of bool;
:comment |         connectedTo0: set indexed by C0 of index;
:comment |         C1: set of indices;
:comment |         connectedTo1: set indexed by C1 of index;
:comment |         S: set of indices;
:comment |         trustedServers: set indexed by S of bool;
:comment | 
:comment |     initial
:comment |         forall(c in C0, forall (s in S, (not trustedClients0[c] and s = connectedTo0[c]) -> (not trustedServers[s])))
:comment |         and forall(c in C1, forall (d in C0, d = connectedTo1[c] -> (not trustedClients0[d])))
:comment |         and forall(c in C0, forall (s not in S, s != connectedTo0[c]))
:comment |         and forall(c in C1, forall (d not in C0, d != connectedTo1[c]));
:comment | 
:comment |     subcomponents
:comment |         d: system databaseServer;
:comment |         servers: set indexed by S of system applicationServer;
:comment |         clients0: set indexed by C0 of system Client;
:comment |         clients1: set indexed by C1 of system Client;
:comment |         e: system Evil;
:comment | 
:comment |     connections
:comment |         d -> servers[s] if trustedServers[s] for s in S;
:comment |         servers[s] -> clients0[c] if s = connectedTo0[c] for s in S, c in C0;
:comment |         clients0[c] -> clients1[d] if c = connectedTo1[d] for c in C0, d in C1;
:comment |         clients0[c] -> clients0[d] if not trustedClients0[c] for c in C0, d in C0;
:comment |         clients1[c] -> clients1[d] for c in C1, d in C1;
:comment |         clients1[c] -> e for c in C1;
:comment | 
:comment |     reconfigurations
:comment |         exists(s not in S, next(S) = add(S, s) and next(trustedServers[s]) = true);
:comment |         exists(s in S, next(trustedServers[s]) = false);
:comment | 
:comment |         exists(s in S, exists (c not in C0, not trustedServers[s] and next(C0) = add(C0, c) and next(connectedTo0[c]) = s and next(trustedClients0[c]) = false));
:comment |         exists(c in C0, exists (d not in C1, not trustedClients0[c] and next(C1) = add(C1, d) and next(connectedTo1[d]) = c));
:comment | 
:comment |         exists(s in S, exists (c not in C0, trustedServers[s] and next(C0) = add(C0, c) and next(connectedTo0[c]) = s and next(trustedClients0[c]) = true));
:comment | 
:comment |         exists(s in S, exists (c in C0, trustedClients0[c] and next(connectedTo0[c]) = s));
:comment | 
:comment |         exists(s in S, exists (c in C0, not trustedClients0[c] and not trustedServers[s] and next(connectedTo0[c]) = s));
:comment |         exists(c in C0, exists (d in C1, not trustedClients0[c] and next(connectedTo1[d]) = c));
:comment | 
:comment |         exists(s in S, exists (c in C0, not trustedClients0[c] and next(connectedTo0[c]) = s and next(trustedServers[s]) = false));
:comment | 
:comment |         exists(s in S, exists (c in C0, trustedClients0[c] and s = connectedTo0[c] and next(trustedClients0[c]) = false and next(trustedServers[s]) = false));
:comment | end sys.impl;

:comment Source components: d
:comment Destination components: e

:index int
:max_transitions_number 1000

:local _C0 bool
:local _C1 bool
:local _S bool
:local _trustedClients0 bool
:local _connectedTo0 int
:local _connectedTo1 int
:local _trustedServers bool
:global _d_token bool
:local _servers_token bool
:local _clients0_token bool
:local _clients1_token bool
:global _e_token bool

:initial
:var x
:var y
:cnj (and (and (and (=> _C0[x] (=> _S[y] (=> (and (= _trustedClients0[x] false) (= y _connectedTo0[x])) (= _trustedServers[y] false)))) (=> _C1[x] (=> _C0[y] (=> (= y _connectedTo1[x]) (= _trustedClients0[y] false))))) (=> _C0[x] (=> (not _S[y]) (not (= y _connectedTo0[x]))))) (=> _C1[x] (=> (not _C0[y]) (not (= y _connectedTo1[x]))))) (= _d_token true) (= _servers_token[x] false) (= _clients0_token[x] false) (= _clients1_token[x] false) (= _e_token false)

:unsafe
:var x
:cnj (= _e_token true)

:comment transition t1
:comment connection 1, case 5
:transition
:var x
:var j
:guard true (= _trustedServers[x] true) true true (= _d_token true) (= _S[x] true)
:numcases 2
:case (= j x)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val true
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token
:case (not (= j x))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token

:comment transition t2
:comment connection 2, case 4a, first transition
:transition
:var x
:var j
:guard true (= x _connectedTo0[x]) true true (= _S[x] true) (= _servers_token[x] true) (= _C0[x] true)
:numcases 2
:case (= j x)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val true
:val _clients1_token[j]
:val _e_token
:case (not (= j x))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token

:comment transition t3
:comment connection 2, case 4a, second transition
:transition
:var x
:var y
:var j
:guard true (= x _connectedTo0[y]) true true (= _S[x] true) (= _servers_token[x] true) (= _C0[y] true)
:numcases 3
:case (= j x)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token
:case (not (= j x)) (= j y)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val true
:val _clients1_token[j]
:val _e_token
:case (not (= j x)) (not (= j y))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token

:comment transition t4
:comment connection 3, case 4a, first transition
:transition
:var x
:var j
:guard true (= x _connectedTo1[x]) true true (= _C0[x] true) (= _clients0_token[x] true) (= _C1[x] true)
:numcases 2
:case (= j x)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val true
:val _e_token
:case (not (= j x))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token

:comment transition t5
:comment connection 3, case 4a, second transition
:transition
:var x
:var y
:var j
:guard true (= x _connectedTo1[y]) true true (= _C0[x] true) (= _clients0_token[x] true) (= _C1[y] true)
:numcases 3
:case (= j x)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token
:case (not (= j x)) (= j y)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val true
:val _e_token
:case (not (= j x)) (not (= j y))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token

:comment transition t6
:comment connection 4, case 4a, first transition
:transition
:var x
:var j
:guard true (= _trustedClients0[x] false) true true (= _C0[x] true) (= _clients0_token[x] true) (= _C0[x] true)
:numcases 2
:case (= j x)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val true
:val _clients1_token[j]
:val _e_token
:case (not (= j x))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token

:comment transition t7
:comment connection 4, case 4a, second transition
:transition
:var x
:var y
:var j
:guard true (= _trustedClients0[x] false) true true (= _C0[x] true) (= _clients0_token[x] true) (= _C0[y] true)
:numcases 3
:case (= j x)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token
:case (not (= j x)) (= j y)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val true
:val _clients1_token[j]
:val _e_token
:case (not (= j x)) (not (= j y))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token

:comment transition t8
:comment connection 5, case 4a, first transition
:transition
:var x
:var j
:guard true true true true (= _C1[x] true) (= _clients1_token[x] true) (= _C1[x] true)
:numcases 2
:case (= j x)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val true
:val _e_token
:case (not (= j x))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token

:comment transition t9
:comment connection 5, case 4a, second transition
:transition
:var x
:var y
:var j
:guard true true true true (= _C1[x] true) (= _clients1_token[x] true) (= _C1[y] true)
:numcases 3
:case (= j x)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token
:case (not (= j x)) (= j y)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val true
:val _e_token
:case (not (= j x)) (not (= j y))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val _e_token

:comment transition t10
:comment connection 6, case 7
:transition
:var x
:var j
:guard true true true true (= _C1[x] true) (= _clients1_token[x] true)
:numcases 2
:case (= j x)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val true
:case (not (= j x))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val _d_token
:val _servers_token[j]
:val _clients0_token[j]
:val _clients1_token[j]
:val true

:comment transition t11
:comment reconfiguration 1, case 2, transition 1 of 1, s -> x
:transition
:var j
:var x
:guard true (= _S[x] false) (= _S[x] false)
:numcases 2
:case (= x j)
:val _C0[j]
:val _C1[j]
:val true
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val true
:val true
:val false
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t12
:comment reconfiguration 2, case 2, transition 1 of 1, s -> x
:transition
:var j
:var x
:guard true (= _S[x] true)
:numcases 2
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val false
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t13
:comment reconfiguration 3, case 3, transition 1 of 2, s -> x, c -> x
:transition
:var j
:var x
:guard true (= _S[x] true) (= _C0[x] false) (= _trustedServers[x] false) (= _C0[x] false)
:numcases 2
:case (= x j)
:val true
:val _C1[j]
:val _S[j]
:val false
:val x
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val false
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t14
:comment reconfiguration 3, case 3, transition 2 of 2, s -> x, c -> y
:transition
:var j
:var x
:var y
:guard true (= _S[x] true) (= _C0[y] false) (= _trustedServers[x] false) (= _C0[y] false)
:numcases 3
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (= y j)
:val true
:val _C1[j]
:val _S[j]
:val false
:val x
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val false
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (not (= y j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t15
:comment reconfiguration 4, case 3, transition 1 of 2, c -> x, d -> x
:transition
:var j
:var x
:guard true (= _C0[x] true) (= _C1[x] false) (= _trustedClients0[x] false) (= _C1[x] false)
:numcases 2
:case (= x j)
:val _C0[j]
:val true
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val x
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val false
:val (and _e_token true)
:case (not (= x j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t16
:comment reconfiguration 4, case 3, transition 2 of 2, c -> x, d -> y
:transition
:var j
:var x
:var y
:guard true (= _C0[x] true) (= _C1[y] false) (= _trustedClients0[x] false) (= _C1[y] false)
:numcases 3
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (= y j)
:val _C0[j]
:val true
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val x
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val false
:val (and _e_token true)
:case (not (= x j)) (not (= y j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t17
:comment reconfiguration 5, case 3, transition 1 of 2, s -> x, c -> x
:transition
:var j
:var x
:guard true (= _S[x] true) (= _C0[x] false) (= _trustedServers[x] true) (= _C0[x] false)
:numcases 2
:case (= x j)
:val true
:val _C1[j]
:val _S[j]
:val true
:val x
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val false
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t18
:comment reconfiguration 5, case 3, transition 2 of 2, s -> x, c -> y
:transition
:var j
:var x
:var y
:guard true (= _S[x] true) (= _C0[y] false) (= _trustedServers[x] true) (= _C0[y] false)
:numcases 3
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (= y j)
:val true
:val _C1[j]
:val _S[j]
:val true
:val x
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val false
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (not (= y j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t19
:comment reconfiguration 6, case 3, transition 1 of 2, s -> x, c -> x
:transition
:var j
:var x
:guard true (= _S[x] true) (= _C0[x] true) (= _trustedClients0[x] true)
:numcases 2
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val x
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t20
:comment reconfiguration 6, case 3, transition 2 of 2, s -> x, c -> y
:transition
:var j
:var x
:var y
:guard true (= _S[x] true) (= _C0[y] true) (= _trustedClients0[y] true)
:numcases 3
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (= y j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val x
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (not (= y j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t21
:comment reconfiguration 7, case 3, transition 1 of 2, s -> x, c -> x
:transition
:var j
:var x
:guard true (= _S[x] true) (= _C0[x] true) (= _trustedClients0[x] false) (= _trustedServers[x] false)
:numcases 2
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val x
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t22
:comment reconfiguration 7, case 3, transition 2 of 2, s -> x, c -> y
:transition
:var j
:var x
:var y
:guard true (= _S[x] true) (= _C0[y] true) (= _trustedClients0[y] false) (= _trustedServers[x] false)
:numcases 3
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (= y j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val x
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (not (= y j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t23
:comment reconfiguration 8, case 3, transition 1 of 2, c -> x, d -> x
:transition
:var j
:var x
:guard true (= _C0[x] true) (= _C1[x] true) (= _trustedClients0[x] false)
:numcases 2
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val x
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t24
:comment reconfiguration 8, case 3, transition 2 of 2, c -> x, d -> y
:transition
:var j
:var x
:var y
:guard true (= _C0[x] true) (= _C1[y] true) (= _trustedClients0[x] false)
:numcases 3
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (= y j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val x
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (not (= y j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t25
:comment reconfiguration 9, case 3, transition 1 of 2, s -> x, c -> x
:transition
:var j
:var x
:guard true (= _S[x] true) (= _C0[x] true) (= _trustedClients0[x] false)
:numcases 2
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val x
:val _connectedTo1[j]
:val false
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t26
:comment reconfiguration 9, case 3, transition 2 of 2, s -> x, c -> y
:transition
:var j
:var x
:var y
:guard true (= _S[x] true) (= _C0[y] true) (= _trustedClients0[y] false)
:numcases 3
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val false
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (= y j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val x
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (not (= y j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t27
:comment reconfiguration 10, case 3, transition 1 of 2, s -> x, c -> x
:transition
:var j
:var x
:guard true (= _S[x] true) (= _C0[x] true) (= _trustedClients0[x] true) (= x _connectedTo0[x])
:numcases 2
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val false
:val _connectedTo0[j]
:val _connectedTo1[j]
:val false
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)

:comment transition t28
:comment reconfiguration 10, case 3, transition 2 of 2, s -> x, c -> y
:transition
:var j
:var x
:var y
:guard true (= _S[x] true) (= _C0[y] true) (= _trustedClients0[y] true) (= x _connectedTo0[y])
:numcases 3
:case (= x j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val false
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (= y j)
:val _C0[j]
:val _C1[j]
:val _S[j]
:val false
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
:case (not (= x j)) (not (= y j))
:val _C0[j]
:val _C1[j]
:val _S[j]
:val _trustedClients0[j]
:val _connectedTo0[j]
:val _connectedTo1[j]
:val _trustedServers[j]
:val true
:val (and _servers_token[j] true)
:val (and _clients0_token[j] true)
:val (and _clients1_token[j] true)
:val (and _e_token true)
