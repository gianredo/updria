

:comment      SOURCE: pfs distribution
:comment      (difficult version)

:smt (define-type locations (subrange 1 3))
:smt (define-type messages1  (subrange 5 7))
:smt (define-type messages2  (subrange 7 10))

:comment   values 5, 11 for t[x] are mapped to false and  true, resp.
:comment   value 5 for d[x] is mapped to  7



:local a locations
:local u messages1
:local d messages2
:local t bool
:local c bool
:local s bool
:local l bool
:global g bool
:global m messages1
:global f bool


:initial 
:var x
:cnj (= a[x] 1) (= u[x] 5) (= d[x] 7) (= t[x] false) (= c[x] false) (= s[x] false) (= l[x] false) (= g[x] false) (= m[x] 5)  (= f[x] false)  
 
:unsafe 
:var x 
:var y
:comment cnj (= a[x] 3)  (= a[y] 2) (= f[y] false) 
:cnj (= a[x] 3)  (> a[y] 1) (< a[y] 4)
 


:comment h0    t1
:transition
:var x
:var j
:guard  (= m[x] 6) (= g[x] false) (= d[x] 7) (= c[x] true) (= f[x] false)
:numcases 2
:case (= x j)
 :val a[j]
 :val u[j] 
 :val 8
 :val t[j]
 :val c[j]
 :val true
 :val l[j]
 :val g[j]
 :val 5
 :val f[j]  
:case      
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val 5
 :val f[j]

:comment h1    t2
:transition
:var x
:var j
:guard (= s[x] false) (= m[x] 7) (= d[x] 7) (= c[x] true) (= f[x] false)
:uguard (= s[j] false) 
:numcases 2
:case (= x j)
 :val a[j]
 :val u[j] 
 :val 9
 :val t[j]
 :val c[j]
 :val true
 :val l[j]
 :val true
 :val 5
 :val f[j]
:case 
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val true
 :val 5
 :val f[j]


:comment h2  t3
:transition
:var x
:var j
:guard  (= m[x] 5) (not (= u[x] 5)) (= f[x] false)
:numcases 2
:case (= x j)
 :val a[j]
 :val 5
 :val d[j]
 :val t[j]
 :val true
 :val s[j]
 :val s[j]
 :val g[j]
 :val u[x]
 :val true
:case      
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val false
 :val s[j]
 :val s[j]
 :val g[j]
 :val u[x]
 :val true




:comment n1   t4
:transition
:var x
:var j
:guard  (= f[x] true) (= s[x] false) 
:numcases 2
:case (= x j)
 :val a[j]
 :val u[j]
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val false
 :val g[j]
 :val m[j]
 :val f[j]
:case      
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]





:comment n2   t5
:transition
:var x
:var j
:guard  (= f[x] true) (= s[x] true) 
:numcases 2
:case (= x j)
 :val a[j]
 :val u[j]
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val true
 :val g[j]
 :val m[j]
 :val f[j]
:case      
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]



:comment n3   t6
:transition
:var x
:var j
:guard  (= f[x] true) (= l[x] s[x]) 
:uguard (= l[j] s[j]) 
:numcases 2
:case (= x j)
 :val a[j]
 :val u[j]
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val false
:case   
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val false





:comment h3    t7
:transition
:var x
:var j
:guard  (= m[x] 6) (= g[x] true) (= l[x] true) (= d[x] 7) (= f[x] false)
:numcases 2
:case (= x j)
 :val a[j]
 :val u[j] 
 :val 10
 :val t[j]
 :val c[j]
 :val s[j]
 :val false
 :val g[j]
 :val m[j]
 :val f[j]
:case      
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]





:comment h4    t8
:transition
:var x
:var j
:guard (= m[x] 7) (= l[x] true) (= d[x] 7)  (= f[x] false)
:numcases 2
:case (= x j)
 :val a[j]
 :val u[j] 
 :val 10
 :val t[j]
 :val c[j]
 :val s[j]
 :val false
 :val g[j]
 :val m[j]
 :val f[j]
:case      
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]


:comment h5   t9
:transition
:var x
:var j
:guard  (not (= m[x] 5)) (= t[x] true)  (= f[x] false)
:numcases 2
:case (= x j)
 :val a[j]
 :val u[j] 
 :val d[j]
 :val false
 :val c[j]
 :val false
 :val l[j]
 :val false
 :val m[j]
 :val f[j]
:case      
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val false
 :val m[j]
 :val f[j]









:comment c1    t10
:transition
:var x
:var j
:guard (= a[x] 1) (= u[x] 5)  (= f[x] false)
:numcases 2
:case (= x j)
 :val 1 
 :val 6 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]
:case      
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]












:comment c2 - c3     t11
:transition
:var x
:var j
:guard (< a[x] 3) (= u[x] 5)  (= f[x] false) 
:numcases 2
:case (= x j)
 :val a[j] 
 :val 7
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]
:case      
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]




:comment c4         t12
:transition
:var x
:var j
:guard  (= d[x] 10) (= t[x] false) (= f[x] false) 
:numcases 2
:case (= x j)
 :val 1 
 :val u[j] 
 :val 7
 :val true
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]
:case      
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]



:comment c5   t13
:transition
:var x
:var j
:guard  (= d[x] 8) (= f[x] false)
:numcases 2
:case (= x j)
 :val 2 
 :val u[j] 
 :val 7
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]
:case      
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]




:comment c6    t14
:transition
:var x
:var j
:guard  (= d[x] 9) (= f[x] false) 
:numcases 2
:case (= x j) 
 :val 3 
 :val u[j] 
 :val 7
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]
:case       
 :val a[j]
 :val u[j] 
 :val d[j]
 :val t[j]
 :val c[j]
 :val s[j]
 :val l[j]
 :val g[j]
 :val m[j]
 :val f[j]

:comment  parameters for invariants search (relevant only for options -i1, -i2, -i3, -a, -c, -I)
:comment  we do not claim they are optimal !!! almost for sure there are better ones ....
:inv_search_start 9000
:dynamic_predicate_abstraction
:inv_search_max_num_cand_invariants 200

:key_search m


